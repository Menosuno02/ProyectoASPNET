@model List<Pedido>

@{
    List<ProductoPedidoView> productos = ViewData["PRODUCTOS"] as List<ProductoPedidoView>;
    string idUsuario = "";
    if (Model.Count > 0)
    {
        idUsuario = Model[0].IdUsuario.ToString();
    }
}

<div class="px-12 py-6 md:px-16">
    <h1 class="text-gray-900 mb-4 mt-2 text-3xl font-bold">Tus pedidos pendientes</h1>
    @if (Model.Count > 0)
    {
        <div id="accordion" class="border-2 rounded-xl" data-accordion="collapse" data-active-classes="bg-purple-100 text-purple-600">
            @foreach (Pedido pedido in Model.OrderByDescending(p => p.FechaPedido))
            {
                <h2 id="accordion-color-heading-@pedido.IdPedido">
                    <button type="button"
                            class="text-gray-500 border-b-0 border-gray-200 flex w-full items-center justify-between gap-3 rounded-t-xl border p-5 font-medium hover:bg-purple-100 focus:ring-4 focus:ring-purple-200 rtl:text-right"
                            data-accordion-target="#accordion-color-body-@pedido.IdPedido" aria-expanded="true" aria-controls="accordion-color-body-@pedido.IdPedido">
                        <span>
                            Pedido #@pedido.IdPedido (ESTADO:
                            <span id="estadopedido-@pedido.IdPedido">@productos.FirstOrDefault(p => p.IdPedido == pedido.IdPedido).Estado</span>)
                        </span>
                        <svg data-accordion-icon class="shrink-0 h-3 w-3 rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5" />
                        </svg>
                    </button>
                </h2>
                <div id="accordion-color-body-@pedido.IdPedido" class="hidden" aria-labelledby="accordion-color-heading-@pedido.IdPedido">
                    <div class="border-b-0 border-gray-200 border p-5">
                        <p class="text-gray-600 mb-2">
                            <span class="text-gray-700 text-2xl">
                                <span class="font-bold">@productos.FirstOrDefault(p => p.IdPedido == pedido.IdPedido).Restaurante</span>
                                &nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;Fecha: @pedido.FechaPedido
                            </span>
                            <div class="relative overflow-x-auto">
                                <table class="text-gray-500 w-full text-left text-sm rtl:text-right">
                                    <thead class="text-gray-900 bg-gray-100 text-xs uppercase">
                                        <tr>
                                            <th scope="col" class="rounded-s-lg px-6 py-3">Producto</th>
                                            <th scope="col" class="px-6 py-3">Cantidad</th>
                                            <th scope="col" class="rounded-e-lg px-6 py-3">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            List<ProductoPedidoView> productosPedido = productos.Where(p => p.IdPedido == pedido.IdPedido).ToList();
                                        }
                                        @foreach (ProductoPedidoView producto in productosPedido)
                                        {
                                            decimal total = producto.Cantidad * producto.Precio;
                                            <tr class="bg-white">
                                                <th scope="row" class="text-gray-900 whitespace-nowrap px-6 py-4 font-medium">
                                                    @producto.Producto
                                                </th>
                                                <td class="px-6 py-4">@producto.Cantidad</td>
                                                <td class="px-6 py-4">@total€</td>
                                            </tr>
                                        }
                                        <tr class="bg-white">
                                            <th scope="row" class="text-gray-900 whitespace-nowrap px-6 py-4 font-medium"></th>
                                            <td class="px-6 py-4"></td>
                                            <td class="text-gray-700 px-6 py-4 font-bold">@productosPedido.Sum(pp => pp.Cantidad * pp.Precio)€</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </p>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <h2 class="text-gray-900 mb-4 mt-2 text-xl font-bold">No tienes pedidos por entregar</h2>
    }
</div>

@section scripts {
    <script>
        const userConnection = connectToSignalR();
        userConnection.on("orderStatusUpdated", (idpedido, estado) => {
            const orderStatusElement = document.getElementById(`estadopedido-${idpedido}`);
            if (orderStatusElement) {
                orderStatusElement.textContent = estado;
            }
        });
    </script>
    @if (Model != null && Model.Count > 0)
    {
        <script>
            function connectToWebSocket(connectionId, routeKey) {
                console.log("Attempting to establish WebSocket connection...");

                const socketUrl = `wss://1yh5c2yt2m.execute-api.us-east-1.amazonaws.com/prod`;
                const socket = new WebSocket(socketUrl);
                console.log(socket);

                socket.onopen = function () {
                    console.log("WebSocket connection established!");
                    const message = {
                        connectionId: @idUsuario,
                        action: "$default"
                    };
                    socket.send(JSON.stringify(message));
                };

                socket.onmessage = function (event) {
                    console.log("Received WebSocket message:", event.data);
                    const message = JSON.parse(event.data);
                    if (message.idpedido && message.estado) {
                        const orderStatusElement = document.getElementById(`estadopedido-${message.idpedido}`);
                        if (orderStatusElement) {
                            orderStatusElement.textContent = message.estado;
                        }
                    }
                };

                socket.onclose = function () {
                    console.log("WebSocket connection closed!");
                };

                socket.onerror = function (error) {
                    console.error("WebSocket error observed:", error);
                };

                return socket;
            }

            // connectToWebSocket();
        </script>
    }
}